package Padre::Wx::FBP::Preferences;

## no critic

# This module was generated by Padre::Plugin::FormBuilder::Perl.
# To change this module edit the original .fbp file and regenerate.
# DO NOT MODIFY THIS FILE BY HAND!

use 5.008005;
use utf8;
use strict;
use warnings;
use Padre::Wx ();
use Padre::Wx::Role::Main ();
use Padre::Wx::Choice::Theme ();
use Padre::Wx::Editor ();
use Padre::Wx::ListView ();

our $VERSION = '1.02';
our @ISA     = qw{
	Padre::Wx::Role::Main
	Wx::Dialog
};

sub new {
	my $class  = shift;
	my $parent = shift;

	my $self = $class->SUPER::new(
		$parent,
		-1,
		Wx::gettext("Padre Preferences"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::DEFAULT_DIALOG_STYLE | Wx::RESIZE_BORDER,
	);

	$self->{treebook} = Wx::Treebook->new(
		$self,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	my $m_panel5 = Wx::Panel->new(
		$self->{treebook},
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::TAB_TRAVERSAL,
	);

	my $m_staticText186 = Wx::StaticText->new(
		$m_panel5,
		-1,
		Wx::gettext("Function List"),
	);
	$m_staticText186->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	my $m_staticline361 = Wx::StaticLine->new(
		$m_panel5,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	my $m_staticText6 = Wx::StaticText->new(
		$m_panel5,
		-1,
		Wx::gettext("Sort Order:"),
	);

	$self->{main_functions_order} = Wx::Choice->new(
		$m_panel5,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		[],
	);
	$self->{main_functions_order}->SetSelection(0);

	my $m_staticText190 = Wx::StaticText->new(
		$m_panel5,
		-1,
		Wx::gettext("Task List"),
	);
	$m_staticText190->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	my $m_staticline40 = Wx::StaticLine->new(
		$m_panel5,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	my $m_staticText11 = Wx::StaticText->new(
		$m_panel5,
		-1,
		Wx::gettext("Item Regular Expression:"),
	);

	$self->{main_tasks_regexp} = Wx::TextCtrl->new(
		$m_panel5,
		-1,
		"",
		Wx::DefaultPosition,
		[ 400, -1 ],
	);

	my $m_staticText187 = Wx::StaticText->new(
		$m_panel5,
		-1,
		Wx::gettext("Miscellaneous"),
	);
	$m_staticText187->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	my $m_staticline37 = Wx::StaticLine->new(
		$m_panel5,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	$self->{window_list_shorten_path} = Wx::CheckBox->new(
		$m_panel5,
		-1,
		Wx::gettext("Shorten the common path in window list"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	$self->{main_output_ansi} = Wx::CheckBox->new(
		$m_panel5,
		-1,
		Wx::gettext("Coloured text in output window (ANSI)"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	$self->{info_on_statusbar} = Wx::CheckBox->new(
		$m_panel5,
		-1,
		Wx::gettext("Show low priority info messages on status bar (not in a popup)"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	my $m_panel4 = Wx::Panel->new(
		$self->{treebook},
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::TAB_TRAVERSAL,
	);

	my $m_staticText36111 = Wx::StaticText->new(
		$m_panel4,
		-1,
		Wx::gettext("Content Assist"),
	);
	$m_staticText36111->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	my $m_staticline411 = Wx::StaticLine->new(
		$m_panel4,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	$self->{autocomplete_always} = Wx::CheckBox->new(
		$m_panel4,
		-1,
		Wx::gettext("Autocomplete always while typing"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	$self->{autocomplete_method} = Wx::CheckBox->new(
		$m_panel4,
		-1,
		Wx::gettext("Autocomplete new methods in packages"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	$self->{autocomplete_subroutine} = Wx::CheckBox->new(
		$m_panel4,
		-1,
		Wx::gettext("Autocomplete new functions in scripts"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	my $m_staticText271 = Wx::StaticText->new(
		$m_panel4,
		-1,
		Wx::gettext("Minimum length of suggestions"),
	);

	$self->{lang_perl5_autocomplete_min_suggestion_len} = Wx::SpinCtrl->new(
		$m_panel4,
		-1,
		"",
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::SP_ARROW_KEYS,
		1,
		64,
		1,
	);

	my $m_staticText281 = Wx::StaticText->new(
		$m_panel4,
		-1,
		Wx::gettext("Maximum number of suggestions"),
	);

	$self->{lang_perl5_autocomplete_max_suggestions} = Wx::SpinCtrl->new(
		$m_panel4,
		-1,
		"",
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::SP_ARROW_KEYS,
		5,
		256,
		5,
	);

	my $m_staticText291 = Wx::StaticText->new(
		$m_panel4,
		-1,
		Wx::gettext("Minimum characters for autocomplete"),
	);

	$self->{lang_perl5_autocomplete_min_chars} = Wx::SpinCtrl->new(
		$m_panel4,
		-1,
		"",
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::SP_ARROW_KEYS,
		1,
		16,
		1,
	);

	my $m_staticText3511 = Wx::StaticText->new(
		$m_panel4,
		-1,
		Wx::gettext("Brace Assist"),
	);
	$m_staticText3511->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	my $m_staticline4111 = Wx::StaticLine->new(
		$m_panel4,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	$self->{autocomplete_brackets} = Wx::CheckBox->new(
		$m_panel4,
		-1,
		Wx::gettext("Autocomplete brackets"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	$self->{autocomplete_multiclosebracket} = Wx::CheckBox->new(
		$m_panel4,
		-1,
		Wx::gettext("Add another closing bracket if there already is one"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	my $m_staticText35111 = Wx::StaticText->new(
		$m_panel4,
		-1,
		Wx::gettext("POD"),
	);
	$m_staticText35111->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	my $m_staticline41111 = Wx::StaticLine->new(
		$m_panel4,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	$self->{editor_fold_pod} = Wx::CheckBox->new(
		$m_panel4,
		-1,
		Wx::gettext("Auto-fold POD markup when code folding enabled"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	my $m_panel10 = Wx::Panel->new(
		$self->{treebook},
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::TAB_TRAVERSAL,
	);

	my $m_staticText1931 = Wx::StaticText->new(
		$m_panel10,
		-1,
		Wx::gettext("Tool Positions"),
	);
	$m_staticText1931->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	my $m_staticline451 = Wx::StaticLine->new(
		$m_panel10,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	my $m_staticText195 = Wx::StaticText->new(
		$m_panel10,
		-1,
		Wx::gettext("Project Browser"),
	);

	$self->{main_directory_panel} = Wx::Choice->new(
		$m_panel10,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		[],
	);
	$self->{main_directory_panel}->SetSelection(0);

	my $m_staticText194 = Wx::StaticText->new(
		$m_panel10,
		-1,
		Wx::gettext("Function List"),
	);

	$self->{main_functions_panel} = Wx::Choice->new(
		$m_panel10,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		[],
	);
	$self->{main_functions_panel}->SetSelection(0);

	my $m_staticText1961 = Wx::StaticText->new(
		$m_panel10,
		-1,
		Wx::gettext("File Outline"),
	);

	$self->{main_outline_panel} = Wx::Choice->new(
		$m_panel10,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		[],
	);
	$self->{main_outline_panel}->SetSelection(0);

	my $m_staticText1971 = Wx::StaticText->new(
		$m_panel10,
		-1,
		Wx::gettext("Task List"),
	);

	$self->{main_tasks_panel} = Wx::Choice->new(
		$m_panel10,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		[],
	);
	$self->{main_tasks_panel}->SetSelection(0);

	$self->{label_cpan} = Wx::StaticText->new(
		$m_panel10,
		-1,
		Wx::gettext("CPAN Explorer"),
	);
	$self->{label_cpan}->Hide;

	$self->{main_cpan_panel} = Wx::Choice->new(
		$m_panel10,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		[],
	);
	$self->{main_cpan_panel}->SetSelection(0);
	$self->{main_cpan_panel}->Hide;

	$self->{label_vcs} = Wx::StaticText->new(
		$m_panel10,
		-1,
		Wx::gettext("Version Control"),
	);
	$self->{label_vcs}->Hide;

	$self->{main_vcs_panel} = Wx::Choice->new(
		$m_panel10,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		[],
	);
	$self->{main_vcs_panel}->SetSelection(0);
	$self->{main_vcs_panel}->Hide;

	my $m_staticText201 = Wx::StaticText->new(
		$m_panel10,
		-1,
		Wx::gettext("Syntax Check"),
	);

	$self->{main_syntax_panel} = Wx::Choice->new(
		$m_panel10,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		[],
	);
	$self->{main_syntax_panel}->SetSelection(0);

	my $m_staticText202 = Wx::StaticText->new(
		$m_panel10,
		-1,
		Wx::gettext("Output"),
	);

	$self->{main_output_panel} = Wx::Choice->new(
		$m_panel10,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		[],
	);
	$self->{main_output_panel}->SetSelection(0);

	my $m_staticText203 = Wx::StaticText->new(
		$m_panel10,
		-1,
		Wx::gettext("Find in Files"),
	);

	$self->{main_foundinfiles_panel} = Wx::Choice->new(
		$m_panel10,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		[],
	);
	$self->{main_foundinfiles_panel}->SetSelection(0);

	my $m_staticText204 = Wx::StaticText->new(
		$m_panel10,
		-1,
		Wx::gettext("Replace In Files"),
	);

	$self->{main_replaceinfiles_panel} = Wx::Choice->new(
		$m_panel10,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		[],
	);
	$self->{main_replaceinfiles_panel}->SetSelection(0);

	my $m_panel2 = Wx::Panel->new(
		$self->{treebook},
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::TAB_TRAVERSAL,
	);

	my $m_staticText191 = Wx::StaticText->new(
		$m_panel2,
		-1,
		Wx::gettext("Startup"),
	);
	$m_staticText191->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	my $m_staticline41 = Wx::StaticLine->new(
		$m_panel2,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	my $m_staticText41 = Wx::StaticText->new(
		$m_panel2,
		-1,
		Wx::gettext("Open Files:"),
	);

	$self->{startup_files} = Wx::Choice->new(
		$m_panel2,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		[],
	);
	$self->{startup_files}->SetSelection(0);

	$self->{main_singleinstance} = Wx::CheckBox->new(
		$m_panel2,
		-1,
		Wx::gettext("Command line files open in existing Padre instance"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	$self->{startup_splash} = Wx::CheckBox->new(
		$m_panel2,
		-1,
		Wx::gettext("Show splash screen"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	my $m_staticText192 = Wx::StaticText->new(
		$m_panel2,
		-1,
		Wx::gettext("New File Creation"),
	);
	$m_staticText192->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	my $m_staticline42 = Wx::StaticLine->new(
		$m_panel2,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	my $m_staticText8 = Wx::StaticText->new(
		$m_panel2,
		-1,
		Wx::gettext("Default Newline Format:"),
	);

	$self->{default_line_ending} = Wx::Choice->new(
		$m_panel2,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		[],
	);
	$self->{default_line_ending}->SetSelection(0);

	my $m_staticText5 = Wx::StaticText->new(
		$m_panel2,
		-1,
		Wx::gettext("Default Project Directory:"),
	);

	$self->{default_projects_directory} = Wx::DirPickerCtrl->new(
		$m_panel2,
		-1,
		"",
		Wx::gettext("Select a folder"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::DIRP_DEFAULT_STYLE,
	);

	my $m_staticText193 = Wx::StaticText->new(
		$m_panel2,
		-1,
		Wx::gettext("Editor Options"),
	);
	$m_staticText193->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	my $m_staticline43 = Wx::StaticLine->new(
		$m_panel2,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	$self->{editor_wordwrap} = Wx::CheckBox->new(
		$m_panel2,
		-1,
		Wx::gettext("Default word wrap on for each file"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	$self->{mid_button_paste} = Wx::CheckBox->new(
		$m_panel2,
		-1,
		Wx::gettext("Use X11 middle button paste style"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	$self->{editor_smart_highlight_enable} = Wx::CheckBox->new(
		$m_panel2,
		-1,
		Wx::gettext("Enable Smart highlighting while typing"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	my $m_staticText196 = Wx::StaticText->new(
		$m_panel2,
		-1,
		Wx::gettext("Save and Close"),
	);
	$m_staticText196->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	my $m_staticline44 = Wx::StaticLine->new(
		$m_panel2,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	$self->{save_autoclean} = Wx::CheckBox->new(
		$m_panel2,
		-1,
		Wx::gettext("Clean up file content on saving (for supported document types)"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	my $m_panel3 = Wx::Panel->new(
		$self->{treebook},
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::TAB_TRAVERSAL,
	);

	my $m_staticText341 = Wx::StaticText->new(
		$m_panel3,
		-1,
		Wx::gettext("Editor Style"),
	);
	$m_staticText341->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	$self->{editor_style} = Padre::Wx::Choice::Theme->new(
		$m_panel3,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		[],
	);
	$self->{editor_style}->SetSelection(0);

	Wx::Event::EVT_CHOICE(
		$self,
		$self->{editor_style},
		sub {
			shift->preview_refresh(@_);
		},
	);

	my $m_staticline21 = Wx::StaticLine->new(
		$m_panel3,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	my $m_staticText10 = Wx::StaticText->new(
		$m_panel3,
		-1,
		Wx::gettext("Cursor blink rate (milliseconds - 0 = off, 500 = default)"),
	);

	$self->{editor_cursor_blink} = Wx::TextCtrl->new(
		$m_panel3,
		-1,
		"",
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);
	$self->{editor_cursor_blink}->SetMaxLength(4);

	$self->{editor_right_margin_enable} = Wx::CheckBox->new(
		$m_panel3,
		-1,
		Wx::gettext("Show right margin at column"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	Wx::Event::EVT_CHECKBOX(
		$self,
		$self->{editor_right_margin_enable},
		sub {
			shift->preview_refresh(@_);
		},
	);

	$self->{editor_right_margin_column} = Wx::TextCtrl->new(
		$m_panel3,
		-1,
		"",
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);
	$self->{editor_right_margin_column}->SetMaxLength(3);

	Wx::Event::EVT_TEXT(
		$self,
		$self->{editor_right_margin_column},
		sub {
			shift->preview_refresh(@_);
		},
	);

	my $m_staticText17 = Wx::StaticText->new(
		$m_panel3,
		-1,
		Wx::gettext("Editor Font"),
	);

	$self->{editor_font} = Wx::FontPickerCtrl->new(
		$m_panel3,
		-1,
		Wx::NullFont,
		Wx::DefaultPosition,
		[ 200, -1 ],
		Wx::FNTP_USE_TEXTCTRL,
	);
	$self->{editor_font}->SetMaxPointSize(100);

	Wx::Event::EVT_FONTPICKER_CHANGED(
		$self,
		$self->{editor_font},
		sub {
			shift->preview_refresh(@_);
		},
	);

	my $m_staticText18 = Wx::StaticText->new(
		$m_panel3,
		-1,
		Wx::gettext("Editor Current Line Background Colour"),
	);

	$self->{editor_currentline_color} = Wx::ColourPickerCtrl->new(
		$m_panel3,
		-1,
		Wx::Colour->new( 0, 0, 0 ),
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::CLRP_DEFAULT_STYLE,
	);

	Wx::Event::EVT_COLOURPICKER_CHANGED(
		$self,
		$self->{editor_currentline_color},
		sub {
			shift->preview_refresh(@_);
		},
	);

	my $m_staticText331 = Wx::StaticText->new(
		$m_panel3,
		-1,
		Wx::gettext("Appearance Preview"),
	);
	$m_staticText331->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	$self->{preview} = Padre::Wx::Editor->new(
		$m_panel3,
		-1,
	);

	my $m_panel11 = Wx::Panel->new(
		$self->{treebook},
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::TAB_TRAVERSAL,
	);

	my $m_staticText2041 = Wx::StaticText->new(
		$m_panel11,
		-1,
		Wx::gettext("Bloat Reduction"),
	);
	$m_staticText2041->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	my $m_staticline471 = Wx::StaticLine->new(
		$m_panel11,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	my $m_staticText205 = Wx::StaticText->new(
		$m_panel11,
		-1,
		Wx::gettext("Optional features can be disabled to simplify the user interface,\nreduce memory consumption and make Padre run faster.\n\nChanges to features are only applied when Padre is restarted."),
	);

	$self->{feature_bookmark} = Wx::CheckBox->new(
		$m_panel11,
		-1,
		Wx::gettext("Editor Bookmark Support"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	$self->{feature_folding} = Wx::CheckBox->new(
		$m_panel11,
		-1,
		Wx::gettext("Editor Code Folding"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	$self->{feature_cursormemory} = Wx::CheckBox->new(
		$m_panel11,
		-1,
		Wx::gettext("Editor Cursor Memory"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	$self->{feature_session} = Wx::CheckBox->new(
		$m_panel11,
		-1,
		Wx::gettext("Editor Session Support"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	$self->{feature_syntax_check_annotations} = Wx::CheckBox->new(
		$m_panel11,
		-1,
		Wx::gettext("Editor Syntax Annotations"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	$self->{feature_document_diffs} = Wx::CheckBox->new(
		$m_panel11,
		-1,
		Wx::gettext("Editor Diff Feature"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	$self->{feature_cpan} = Wx::CheckBox->new(
		$m_panel11,
		-1,
		Wx::gettext("CPAN Explorer Tool"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	$self->{feature_debugger} = Wx::CheckBox->new(
		$m_panel11,
		-1,
		Wx::gettext("Graphical Debugger Tool"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	$self->{feature_vcs_support} = Wx::CheckBox->new(
		$m_panel11,
		-1,
		Wx::gettext("Version Control Tool"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	$self->{feature_fontsize} = Wx::CheckBox->new(
		$m_panel11,
		-1,
		Wx::gettext("Change Font Size (Outside Preferences)"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	my $m_panel1 = Wx::Panel->new(
		$self->{treebook},
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::TAB_TRAVERSAL,
	);

	my $m_staticText183 = Wx::StaticText->new(
		$m_panel1,
		-1,
		Wx::gettext("Indent Settings"),
	);
	$m_staticText183->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	my $m_staticline36 = Wx::StaticLine->new(
		$m_panel1,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	$self->{editor_indent_tab} = Wx::CheckBox->new(
		$m_panel1,
		-1,
		Wx::gettext("Use tabs instead of spaces"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	my $m_staticText3 = Wx::StaticText->new(
		$m_panel1,
		-1,
		Wx::gettext("Indent Spaces:"),
	);

	$self->{editor_indent_width} = Wx::SpinCtrl->new(
		$m_panel1,
		-1,
		"",
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::SP_ARROW_KEYS,
		1,
		10,
		8,
	);

	my $m_staticText2 = Wx::StaticText->new(
		$m_panel1,
		-1,
		Wx::gettext("Tab Spaces:"),
	);

	$self->{editor_indent_tab_width} = Wx::SpinCtrl->new(
		$m_panel1,
		-1,
		"",
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::SP_ARROW_KEYS,
		1,
		16,
		8,
	);

	$self->{editor_indent_guess} = Wx::Button->new(
		$m_panel1,
		-1,
		Wx::gettext("Guess from Current Document"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	Wx::Event::EVT_BUTTON(
		$self,
		$self->{editor_indent_guess},
		sub {
			shift->guess(@_);
		},
	);

	my $m_staticText184 = Wx::StaticText->new(
		$m_panel1,
		-1,
		Wx::gettext("Indent Detection"),
	);
	$m_staticText184->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	my $m_staticline34 = Wx::StaticLine->new(
		$m_panel1,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	$self->{editor_indent_auto} = Wx::CheckBox->new(
		$m_panel1,
		-1,
		Wx::gettext("Detect indent settings for each file"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	my $m_staticText185 = Wx::StaticText->new(
		$m_panel1,
		-1,
		Wx::gettext("Autoindent"),
	);
	$m_staticText185->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	my $m_staticline351 = Wx::StaticLine->new(
		$m_panel1,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	my $m_staticText4 = Wx::StaticText->new(
		$m_panel1,
		-1,
		Wx::gettext("Indent on Newline:"),
	);

	$self->{editor_autoindent} = Wx::Choice->new(
		$m_panel1,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		[],
	);
	$self->{editor_autoindent}->SetSelection(0);

	$self->{keybindings_panel} = Wx::Panel->new(
		$self->{treebook},
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::TAB_TRAVERSAL,
	);

	my $m_staticText59 = Wx::StaticText->new(
		$self->{keybindings_panel},
		-1,
		Wx::gettext("&Filter:"),
	);

	$self->{filter} = Wx::TextCtrl->new(
		$self->{keybindings_panel},
		-1,
		"",
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	Wx::Event::EVT_TEXT(
		$self,
		$self->{filter},
		sub {
			shift->_update_list(@_);
		},
	);

	$self->{list} = Padre::Wx::ListView->new(
		$self->{keybindings_panel},
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LC_REPORT | Wx::LC_SINGLE_SEL,
	);

	Wx::Event::EVT_LIST_COL_CLICK(
		$self,
		$self->{list},
		sub {
			shift->_on_list_col_click(@_);
		},
	);

	Wx::Event::EVT_LIST_ITEM_SELECTED(
		$self,
		$self->{list},
		sub {
			shift->_on_list_item_selected(@_);
		},
	);

	$self->{shortcut_label} = Wx::StaticText->new(
		$self->{keybindings_panel},
		-1,
		Wx::gettext("Shortcut:"),
	);

	$self->{ctrl} = Wx::CheckBox->new(
		$self->{keybindings_panel},
		-1,
		Wx::gettext("Ctrl"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	$self->{alt} = Wx::CheckBox->new(
		$self->{keybindings_panel},
		-1,
		Wx::gettext("Alt"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	$self->{plus1_label} = Wx::StaticText->new(
		$self->{keybindings_panel},
		-1,
		Wx::gettext("+"),
	);

	$self->{shift} = Wx::CheckBox->new(
		$self->{keybindings_panel},
		-1,
		Wx::gettext("Shift"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	$self->{plus2_label} = Wx::StaticText->new(
		$self->{keybindings_panel},
		-1,
		Wx::gettext("+"),
	);

	$self->{key} = Wx::Choice->new(
		$self->{keybindings_panel},
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		[],
	);
	$self->{key}->SetSelection(0);

	$self->{button_set} = Wx::Button->new(
		$self->{keybindings_panel},
		-1,
		Wx::gettext("S&et"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);
	$self->{button_set}->SetToolTip(
		Wx::gettext("Sets the keyboard binding")
	);

	Wx::Event::EVT_BUTTON(
		$self,
		$self->{button_set},
		sub {
			shift->_on_set_button(@_);
		},
	);

	$self->{button_delete} = Wx::Button->new(
		$self->{keybindings_panel},
		-1,
		Wx::gettext("&Delete"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);
	$self->{button_delete}->SetToolTip(
		Wx::gettext("Delete the keyboard binding")
	);

	Wx::Event::EVT_BUTTON(
		$self,
		$self->{button_delete},
		sub {
			shift->_on_delete_button(@_);
		},
	);

	$self->{button_reset} = Wx::Button->new(
		$self->{keybindings_panel},
		-1,
		Wx::gettext("&Reset"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);
	$self->{button_reset}->SetToolTip(
		Wx::gettext("Reset to default shortcut")
	);

	Wx::Event::EVT_BUTTON(
		$self,
		$self->{button_reset},
		sub {
			shift->_on_reset_button(@_);
		},
	);

	my $m_panel8 = Wx::Panel->new(
		$self->{treebook},
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::TAB_TRAVERSAL,
	);

	my $m_staticText197 = Wx::StaticText->new(
		$m_panel8,
		-1,
		Wx::gettext("Change Detection"),
	);
	$m_staticText197->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	my $m_staticline45 = Wx::StaticLine->new(
		$m_panel8,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	my $m_staticText9 = Wx::StaticText->new(
		$m_panel8,
		-1,
		Wx::gettext("Local file update poll interval in seconds (0 to disable)"),
	);

	$self->{update_file_from_disk_interval} = Wx::SpinCtrl->new(
		$m_panel8,
		-1,
		"",
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::SP_ARROW_KEYS,
		0,
		10,
		0,
	);

	my $m_staticText198 = Wx::StaticText->new(
		$m_panel8,
		-1,
		Wx::gettext("Open HTTP Files"),
	);
	$m_staticText198->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	my $m_staticline46 = Wx::StaticLine->new(
		$m_panel8,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	my $m_staticText31 = Wx::StaticText->new(
		$m_panel8,
		-1,
		Wx::gettext("Timeout (seconds)"),
	);

	$self->{file_http_timeout} = Wx::SpinCtrl->new(
		$m_panel8,
		-1,
		"",
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::SP_ARROW_KEYS,
		10,
		900,
		10,
	);

	my $m_staticText199 = Wx::StaticText->new(
		$m_panel8,
		-1,
		Wx::gettext("Open FTP Files"),
	);
	$m_staticText199->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	my $m_staticline47 = Wx::StaticLine->new(
		$m_panel8,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	$self->{file_ftp_passive} = Wx::CheckBox->new(
		$m_panel8,
		-1,
		Wx::gettext("Use FTP passive mode"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	my $m_staticText33 = Wx::StaticText->new(
		$m_panel8,
		-1,
		Wx::gettext("Timeout (seconds)"),
	);

	$self->{file_ftp_timeout} = Wx::SpinCtrl->new(
		$m_panel8,
		-1,
		"",
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::SP_ARROW_KEYS,
		10,
		900,
		10,
	);

	my $m_panel7 = Wx::Panel->new(
		$self->{treebook},
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::TAB_TRAVERSAL,
	);

	my $m_staticText39 = Wx::StaticText->new(
		$m_panel7,
		-1,
		Wx::gettext("Language Integration"),
	);
	$m_staticText39->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	my $m_staticline10 = Wx::StaticLine->new(
		$m_panel7,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	$self->{lang_perl5_beginner} = Wx::CheckBox->new(
		$m_panel7,
		-1,
		Wx::gettext("Enable Perl beginner mode"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	my $m_staticText34 = Wx::StaticText->new(
		$m_panel7,
		-1,
		Wx::gettext("Perl Executable:"),
	);

	$self->{run_perl_cmd} = Wx::TextCtrl->new(
		$m_panel7,
		-1,
		"",
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	my $m_staticText26 = Wx::StaticText->new(
		$m_panel7,
		-1,
		Wx::gettext("Perl Ctags File:"),
	);

	$self->{lang_perl5_tags_file} = Wx::FilePickerCtrl->new(
		$m_panel7,
		-1,
		"",
		Wx::gettext("Select a file"),
		"*.*",
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::FLP_DEFAULT_STYLE,
	);

	my $m_staticText189 = Wx::StaticText->new(
		$m_panel7,
		-1,
		Wx::gettext("Script Execution"),
	);
	$m_staticText189->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	my $m_staticline39 = Wx::StaticLine->new(
		$m_panel7,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	$self->{run_use_external_window} = Wx::CheckBox->new(
		$m_panel7,
		-1,
		Wx::gettext("Use external window for execution"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	my $m_staticText35 = Wx::StaticText->new(
		$m_panel7,
		-1,
		Wx::gettext("Perl Arguments"),
	);

	$self->{run_interpreter_args_default} = Wx::TextCtrl->new(
		$m_panel7,
		-1,
		"",
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	my $m_staticText36 = Wx::StaticText->new(
		$m_panel7,
		-1,
		Wx::gettext("Include directory:  -I<dir>\nEnable tainting checks:  -T\nEnable many useful warnings:  -w\nEnable all warnings:  -W\nDisable all warnings:  -X"),
	);

	my $m_staticText37 = Wx::StaticText->new(
		$m_panel7,
		-1,
		Wx::gettext("Script Arguments"),
	);

	$self->{run_script_args_default} = Wx::TextCtrl->new(
		$m_panel7,
		-1,
		"",
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	my $m_panel6 = Wx::Panel->new(
		$self->{treebook},
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::TAB_TRAVERSAL,
	);

	my $m_staticText391 = Wx::StaticText->new(
		$m_panel6,
		-1,
		Wx::gettext("Language Integration"),
	);
	$m_staticText391->SetFont(
		Wx::Font->new( Wx::NORMAL_FONT->GetPointSize, 70, 90, 92, 0, "" )
	);

	my $m_staticline101 = Wx::StaticLine->new(
		$m_panel6,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	$self->{lang_perl6_auto_detection} = Wx::CheckBox->new(
		$m_panel6,
		-1,
		Wx::gettext("Detect Perl 6 files"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	my $m_staticline1 = Wx::StaticLine->new(
		$self,
		-1,
		Wx::DefaultPosition,
		Wx::DefaultSize,
		Wx::LI_HORIZONTAL,
	);

	$self->{save} = Wx::Button->new(
		$self,
		Wx::ID_OK,
		Wx::gettext("&Save"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);
	$self->{save}->SetDefault;

	$self->{advanced} = Wx::Button->new(
		$self,
		-1,
		Wx::gettext("&Advanced..."),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	Wx::Event::EVT_BUTTON(
		$self,
		$self->{advanced},
		sub {
			shift->advanced(@_);
		},
	);

	$self->{cancel} = Wx::Button->new(
		$self,
		-1,
		Wx::gettext("&Cancel"),
		Wx::DefaultPosition,
		Wx::DefaultSize,
	);

	Wx::Event::EVT_BUTTON(
		$self,
		$self->{cancel},
		sub {
			shift->cancel(@_);
		},
	);

	my $fgSizer241 = Wx::FlexGridSizer->new( 1, 2, 5, 5 );
	$fgSizer241->SetFlexibleDirection(Wx::BOTH);
	$fgSizer241->SetNonFlexibleGrowMode(Wx::FLEX_GROWMODE_SPECIFIED);
	$fgSizer241->Add( $m_staticText6, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer241->Add( $self->{main_functions_order}, 0, Wx::EXPAND, 5 );

	my $bSizer116 = Wx::BoxSizer->new(Wx::VERTICAL);
	$bSizer116->Add( $m_staticText186, 0, Wx::ALL, 5 );
	$bSizer116->Add( $m_staticline361, 0, Wx::BOTTOM | Wx::EXPAND | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer116->Add( $fgSizer241, 0, Wx::ALL, 5 );
	$bSizer116->Add( 0, 10, 0, Wx::EXPAND, 5 );
	$bSizer116->Add( $m_staticText190, 0, Wx::ALL, 5 );
	$bSizer116->Add( $m_staticline40, 0, Wx::BOTTOM | Wx::EXPAND | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer116->Add( $m_staticText11, 0, Wx::ALIGN_CENTER_VERTICAL | Wx::ALL, 5 );
	$bSizer116->Add( $self->{main_tasks_regexp}, 0, Wx::ALIGN_CENTER_VERTICAL | Wx::BOTTOM | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer116->Add( 0, 10, 0, Wx::EXPAND, 5 );
	$bSizer116->Add( $m_staticText187, 0, Wx::ALL, 5 );
	$bSizer116->Add( $m_staticline37, 0, Wx::BOTTOM | Wx::EXPAND | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer116->Add( $self->{window_list_shorten_path}, 0, Wx::ALL, 5 );
	$bSizer116->Add( $self->{main_output_ansi}, 0, Wx::ALL, 5 );
	$bSizer116->Add( $self->{info_on_statusbar}, 0, Wx::ALL, 5 );

	$m_panel5->SetSizerAndFit($bSizer116);
	$m_panel5->Layout;

	my $fgSizer411 = Wx::FlexGridSizer->new( 6, 2, 5, 5 );
	$fgSizer411->SetFlexibleDirection(Wx::BOTH);
	$fgSizer411->SetNonFlexibleGrowMode(Wx::FLEX_GROWMODE_SPECIFIED);
	$fgSizer411->Add( $m_staticText271, 0, Wx::ALIGN_CENTER_VERTICAL | Wx::ALL, 0 );
	$fgSizer411->Add( $self->{lang_perl5_autocomplete_min_suggestion_len}, 0, Wx::ALL, 0 );
	$fgSizer411->Add( $m_staticText281, 0, Wx::ALIGN_CENTER_VERTICAL | Wx::ALL, 0 );
	$fgSizer411->Add( $self->{lang_perl5_autocomplete_max_suggestions}, 0, Wx::ALL, 0 );
	$fgSizer411->Add( $m_staticText291, 0, Wx::ALIGN_CENTER_VERTICAL | Wx::ALL, 0 );
	$fgSizer411->Add( $self->{lang_perl5_autocomplete_min_chars}, 0, Wx::ALL, 0 );

	my $fgSizer413 = Wx::FlexGridSizer->new( 1, 1, 0, 0 );
	$fgSizer413->SetFlexibleDirection(Wx::BOTH);
	$fgSizer413->SetNonFlexibleGrowMode(Wx::FLEX_GROWMODE_SPECIFIED);
	$fgSizer413->Add( 0, 0, 1, Wx::EXPAND, 5 );
	$fgSizer413->Add( $self->{editor_fold_pod}, 0, Wx::ALL, 5 );
	$fgSizer413->Add( 0, 0, 1, Wx::EXPAND, 5 );

	my $bSizer41 = Wx::BoxSizer->new(Wx::VERTICAL);
	$bSizer41->Add( $m_staticText36111, 0, Wx::ALL, 5 );
	$bSizer41->Add( $m_staticline411, 0, Wx::BOTTOM | Wx::EXPAND | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer41->Add( $self->{autocomplete_always}, 0, Wx::ALL, 5 );
	$bSizer41->Add( $self->{autocomplete_method}, 0, Wx::ALL, 5 );
	$bSizer41->Add( $self->{autocomplete_subroutine}, 0, Wx::ALL, 5 );
	$bSizer41->Add( $fgSizer411, 0, Wx::ALL, 5 );
	$bSizer41->Add( 0, 10, 0, Wx::EXPAND, 5 );
	$bSizer41->Add( $m_staticText3511, 0, Wx::ALL, 5 );
	$bSizer41->Add( $m_staticline4111, 0, Wx::BOTTOM | Wx::EXPAND | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer41->Add( $self->{autocomplete_brackets}, 0, Wx::ALL, 5 );
	$bSizer41->Add( $self->{autocomplete_multiclosebracket}, 0, Wx::ALL, 5 );
	$bSizer41->Add( 0, 10, 0, Wx::EXPAND, 5 );
	$bSizer41->Add( $m_staticText35111, 0, Wx::ALL, 5 );
	$bSizer41->Add( $m_staticline41111, 0, Wx::BOTTOM | Wx::EXPAND | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer41->Add( $fgSizer413, 0, 0, 5 );

	$m_panel4->SetSizerAndFit($bSizer41);
	$m_panel4->Layout;

	my $fgSizer29 = Wx::FlexGridSizer->new( 10, 2, 5, 20 );
	$fgSizer29->SetFlexibleDirection(Wx::BOTH);
	$fgSizer29->SetNonFlexibleGrowMode(Wx::FLEX_GROWMODE_SPECIFIED);
	$fgSizer29->Add( $m_staticText195, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer29->Add( $self->{main_directory_panel}, 0, 0, 5 );
	$fgSizer29->Add( $m_staticText194, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer29->Add( $self->{main_functions_panel}, 0, 0, 5 );
	$fgSizer29->Add( $m_staticText1961, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer29->Add( $self->{main_outline_panel}, 0, 0, 5 );
	$fgSizer29->Add( $m_staticText1971, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer29->Add( $self->{main_tasks_panel}, 0, 0, 5 );
	$fgSizer29->Add( $self->{label_cpan}, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer29->Add( $self->{main_cpan_panel}, 0, 0, 5 );
	$fgSizer29->Add( $self->{label_vcs}, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer29->Add( $self->{main_vcs_panel}, 0, 0, 5 );
	$fgSizer29->Add( $m_staticText201, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer29->Add( $self->{main_syntax_panel}, 0, 0, 5 );
	$fgSizer29->Add( $m_staticText202, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer29->Add( $self->{main_output_panel}, 0, 0, 5 );
	$fgSizer29->Add( $m_staticText203, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer29->Add( $self->{main_foundinfiles_panel}, 0, 0, 5 );
	$fgSizer29->Add( $m_staticText204, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer29->Add( $self->{main_replaceinfiles_panel}, 0, 0, 5 );

	my $bSizer118 = Wx::BoxSizer->new(Wx::VERTICAL);
	$bSizer118->Add( $m_staticText1931, 0, Wx::ALL, 5 );
	$bSizer118->Add( $m_staticline451, 0, Wx::BOTTOM | Wx::EXPAND | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer118->Add( $fgSizer29, 0, Wx::ALL, 5 );

	$m_panel10->SetSizerAndFit($bSizer118);
	$m_panel10->Layout;

	my $fgSizer30 = Wx::FlexGridSizer->new( 1, 2, 5, 5 );
	$fgSizer30->SetFlexibleDirection(Wx::BOTH);
	$fgSizer30->SetNonFlexibleGrowMode(Wx::FLEX_GROWMODE_SPECIFIED);
	$fgSizer30->Add( $m_staticText41, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer30->Add( $self->{startup_files}, 0, Wx::ALIGN_CENTER_VERTICAL | Wx::EXPAND, 5 );

	my $fgSizer28 = Wx::FlexGridSizer->new( 2, 2, 5, 5 );
	$fgSizer28->SetMinSize( [ 400, -1 ] );
	$fgSizer28->AddGrowableCol(1);
	$fgSizer28->SetFlexibleDirection(Wx::BOTH);
	$fgSizer28->SetNonFlexibleGrowMode(Wx::FLEX_GROWMODE_SPECIFIED);
	$fgSizer28->Add( $m_staticText8, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer28->Add( $self->{default_line_ending}, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer28->Add( $m_staticText5, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer28->Add( $self->{default_projects_directory}, 0, Wx::ALIGN_CENTER_VERTICAL | Wx::EXPAND, 5 );

	my $bSizer117 = Wx::BoxSizer->new(Wx::VERTICAL);
	$bSizer117->Add( $m_staticText191, 0, Wx::ALL, 5 );
	$bSizer117->Add( $m_staticline41, 0, Wx::BOTTOM | Wx::EXPAND | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer117->Add( $fgSizer30, 0, Wx::ALL, 5 );
	$bSizer117->Add( $self->{main_singleinstance}, 0, Wx::ALL, 5 );
	$bSizer117->Add( $self->{startup_splash}, 0, Wx::ALL, 5 );
	$bSizer117->Add( 0, 10, 0, Wx::EXPAND, 5 );
	$bSizer117->Add( $m_staticText192, 0, Wx::ALL, 5 );
	$bSizer117->Add( $m_staticline42, 0, Wx::BOTTOM | Wx::EXPAND | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer117->Add( $fgSizer28, 0, Wx::ALL, 5 );
	$bSizer117->Add( 0, 10, 0, Wx::EXPAND, 5 );
	$bSizer117->Add( $m_staticText193, 0, Wx::ALL, 5 );
	$bSizer117->Add( $m_staticline43, 0, Wx::BOTTOM | Wx::EXPAND | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer117->Add( $self->{editor_wordwrap}, 0, Wx::ALL, 5 );
	$bSizer117->Add( $self->{mid_button_paste}, 0, Wx::ALL, 5 );
	$bSizer117->Add( $self->{editor_smart_highlight_enable}, 0, Wx::ALL, 5 );
	$bSizer117->Add( 0, 10, 0, 0, 5 );
	$bSizer117->Add( $m_staticText196, 0, Wx::ALL, 5 );
	$bSizer117->Add( $m_staticline44, 0, Wx::BOTTOM | Wx::EXPAND | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer117->Add( $self->{save_autoclean}, 0, Wx::ALL, 5 );
	$bSizer117->Add( 0, 10, 0, Wx::EXPAND, 5 );

	$m_panel2->SetSizerAndFit($bSizer117);
	$m_panel2->Layout;

	my $fgSizer91 = Wx::FlexGridSizer->new( 1, 2, 0, 0 );
	$fgSizer91->SetFlexibleDirection(Wx::BOTH);
	$fgSizer91->SetNonFlexibleGrowMode(Wx::FLEX_GROWMODE_SPECIFIED);
	$fgSizer91->Add( $m_staticText341, 0, Wx::ALIGN_CENTER_VERTICAL | Wx::ALL, 5 );
	$fgSizer91->Add( $self->{editor_style}, 0, Wx::ALL, 5 );

	my $fgSizer4 = Wx::FlexGridSizer->new( 4, 2, 0, 20 );
	$fgSizer4->AddGrowableCol(1);
	$fgSizer4->SetFlexibleDirection(Wx::BOTH);
	$fgSizer4->SetNonFlexibleGrowMode(Wx::FLEX_GROWMODE_SPECIFIED);
	$fgSizer4->Add( $m_staticText10, 0, Wx::ALIGN_CENTER_VERTICAL | Wx::ALL, 5 );
	$fgSizer4->Add( $self->{editor_cursor_blink}, 0, Wx::ALIGN_CENTER_VERTICAL | Wx::ALL, 5 );
	$fgSizer4->Add( $self->{editor_right_margin_enable}, 0, Wx::ALIGN_CENTER_VERTICAL | Wx::ALL, 5 );
	$fgSizer4->Add( $self->{editor_right_margin_column}, 0, Wx::ALL, 5 );
	$fgSizer4->Add( $m_staticText17, 0, Wx::ALIGN_CENTER_VERTICAL | Wx::ALL, 5 );
	$fgSizer4->Add( $self->{editor_font}, 0, Wx::ALL | Wx::EXPAND, 5 );
	$fgSizer4->Add( $m_staticText18, 0, Wx::ALIGN_CENTER_VERTICAL | Wx::ALL, 5 );
	$fgSizer4->Add( $self->{editor_currentline_color}, 0, Wx::ALL | Wx::EXPAND, 5 );

	my $bSizer4 = Wx::BoxSizer->new(Wx::VERTICAL);
	$bSizer4->Add( $fgSizer91, 0, 0, 5 );
	$bSizer4->Add( $m_staticline21, 0, Wx::BOTTOM | Wx::EXPAND | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer4->Add( $fgSizer4, 0, 0, 0 );
	$bSizer4->Add( $m_staticText331, 0, Wx::ALL, 5 );
	$bSizer4->Add( 0, 10, 0, Wx::EXPAND, 5 );
	$bSizer4->Add( $self->{preview}, 1, Wx::EXPAND, 5 );

	$m_panel3->SetSizerAndFit($bSizer4);
	$m_panel3->Layout;

	my $bSizer121 = Wx::BoxSizer->new(Wx::VERTICAL);
	$bSizer121->Add( $m_staticText2041, 0, Wx::ALL, 5 );
	$bSizer121->Add( $m_staticline471, 0, Wx::BOTTOM | Wx::EXPAND | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer121->Add( $m_staticText205, 0, Wx::BOTTOM | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer121->Add( 0, 10, 0, Wx::EXPAND, 5 );
	$bSizer121->Add( $self->{feature_bookmark}, 0, Wx::ALL, 5 );
	$bSizer121->Add( $self->{feature_folding}, 0, Wx::ALL, 5 );
	$bSizer121->Add( $self->{feature_cursormemory}, 0, Wx::ALL, 5 );
	$bSizer121->Add( $self->{feature_session}, 0, Wx::ALL, 5 );
	$bSizer121->Add( $self->{feature_syntax_check_annotations}, 0, Wx::ALL, 5 );
	$bSizer121->Add( $self->{feature_document_diffs}, 0, Wx::ALL, 5 );
	$bSizer121->Add( $self->{feature_cpan}, 0, Wx::ALL, 5 );
	$bSizer121->Add( $self->{feature_debugger}, 0, Wx::ALL, 5 );
	$bSizer121->Add( $self->{feature_vcs_support}, 0, Wx::ALL, 5 );
	$bSizer121->Add( $self->{feature_fontsize}, 0, Wx::ALL, 5 );

	$m_panel11->SetSizerAndFit($bSizer121);
	$m_panel11->Layout;

	my $fgSizer24 = Wx::FlexGridSizer->new( 2, 2, 5, 5 );
	$fgSizer24->SetFlexibleDirection(Wx::BOTH);
	$fgSizer24->SetNonFlexibleGrowMode(Wx::FLEX_GROWMODE_SPECIFIED);
	$fgSizer24->Add( $m_staticText3, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer24->Add( $self->{editor_indent_width}, 0, 0, 5 );
	$fgSizer24->Add( $m_staticText2, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer24->Add( $self->{editor_indent_tab_width}, 0, 0, 5 );

	my $bSizer114 = Wx::BoxSizer->new(Wx::VERTICAL);
	$bSizer114->Add( $self->{editor_indent_tab}, 0, Wx::ALL, 5 );
	$bSizer114->Add( $fgSizer24, 0, Wx::ALL, 5 );

	my $bSizer1131 = Wx::BoxSizer->new(Wx::HORIZONTAL);
	$bSizer1131->Add( $bSizer114, 1, Wx::EXPAND, 5 );
	$bSizer1131->Add( 20, 0, 0, 0, 5 );
	$bSizer1131->Add( $self->{editor_indent_guess}, 1, Wx::ALIGN_LEFT | Wx::ALIGN_TOP | Wx::ALL, 5 );

	my $fgSizer23 = Wx::FlexGridSizer->new( 2, 2, 5, 5 );
	$fgSizer23->SetFlexibleDirection(Wx::BOTH);
	$fgSizer23->SetNonFlexibleGrowMode(Wx::FLEX_GROWMODE_SPECIFIED);
	$fgSizer23->Add( $m_staticText4, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer23->Add( $self->{editor_autoindent}, 0, 0, 5 );

	my $bSizer113 = Wx::BoxSizer->new(Wx::VERTICAL);
	$bSizer113->Add( $m_staticText183, 0, Wx::ALL, 5 );
	$bSizer113->Add( $m_staticline36, 0, Wx::BOTTOM | Wx::EXPAND | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer113->Add( $bSizer1131, 0, 0, 5 );
	$bSizer113->Add( 0, 10, 0, Wx::EXPAND, 5 );
	$bSizer113->Add( $m_staticText184, 0, Wx::ALL, 5 );
	$bSizer113->Add( $m_staticline34, 0, Wx::BOTTOM | Wx::EXPAND | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer113->Add( $self->{editor_indent_auto}, 0, Wx::ALL, 5 );
	$bSizer113->Add( 0, 10, 0, Wx::EXPAND, 5 );
	$bSizer113->Add( $m_staticText185, 0, Wx::ALL, 5 );
	$bSizer113->Add( $m_staticline351, 0, Wx::BOTTOM | Wx::EXPAND | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer113->Add( $fgSizer23, 0, Wx::ALL, 5 );

	$m_panel1->SetSizerAndFit($bSizer113);
	$m_panel1->Layout;

	my $filter_sizer = Wx::BoxSizer->new(Wx::HORIZONTAL);
	$filter_sizer->Add( $m_staticText59, 0, Wx::ALIGN_CENTER_VERTICAL | Wx::ALL, 5 );
	$filter_sizer->Add( $self->{filter}, 1, Wx::ALL, 5 );

	my $ctrl_alt_sizer = Wx::BoxSizer->new(Wx::VERTICAL);
	$ctrl_alt_sizer->Add( $self->{ctrl}, 0, Wx::ALL, 5 );
	$ctrl_alt_sizer->Add( $self->{alt}, 0, Wx::ALL, 5 );

	my $button_sizer = Wx::BoxSizer->new(Wx::HORIZONTAL);
	$button_sizer->Add( $self->{button_set}, 0, Wx::ALL, 5 );
	$button_sizer->Add( $self->{button_delete}, 0, Wx::ALL, 5 );
	$button_sizer->Add( $self->{button_reset}, 0, Wx::ALL, 5 );

	my $bottom_sizer = Wx::BoxSizer->new(Wx::HORIZONTAL);
	$bottom_sizer->Add( 15, 0, 0, Wx::EXPAND, 0 );
	$bottom_sizer->Add( $self->{shortcut_label}, 0, Wx::ALIGN_CENTER, 5 );
	$bottom_sizer->Add( 0, 0, 1, Wx::EXPAND, 5 );
	$bottom_sizer->Add( $ctrl_alt_sizer, 1, Wx::EXPAND, 5 );
	$bottom_sizer->Add( $self->{plus1_label}, 0, Wx::ALIGN_CENTER_VERTICAL | Wx::ALL, 5 );
	$bottom_sizer->Add( $self->{shift}, 0, Wx::ALIGN_CENTER_VERTICAL | Wx::ALL, 5 );
	$bottom_sizer->Add( $self->{plus2_label}, 0, Wx::ALIGN_CENTER | Wx::ALL, 5 );
	$bottom_sizer->Add( $self->{key}, 0, Wx::ALIGN_CENTER_VERTICAL | Wx::ALL, 5 );
	$bottom_sizer->Add( 0, 0, 1, Wx::EXPAND, 5 );
	$bottom_sizer->Add( $button_sizer, 0, Wx::ALIGN_CENTER_VERTICAL | Wx::ALIGN_RIGHT, 0 );
	$bottom_sizer->Add( 15, 0, 0, Wx::EXPAND, 0 );

	my $sizer = Wx::BoxSizer->new(Wx::VERTICAL);
	$sizer->Add( $filter_sizer, 0, Wx::EXPAND, 5 );
	$sizer->Add( $self->{list}, 1, Wx::ALL | Wx::EXPAND, 5 );
	$sizer->Add( $bottom_sizer, 0, Wx::EXPAND, 0 );

	$self->{keybindings_panel}->SetSizerAndFit($sizer);
	$self->{keybindings_panel}->Layout;

	my $fgSizer34 = Wx::FlexGridSizer->new( 1, 2, 5, 5 );
	$fgSizer34->SetFlexibleDirection(Wx::BOTH);
	$fgSizer34->SetNonFlexibleGrowMode(Wx::FLEX_GROWMODE_SPECIFIED);
	$fgSizer34->Add( $m_staticText9, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer34->Add( $self->{update_file_from_disk_interval}, 0, Wx::ALIGN_CENTER_VERTICAL | Wx::ALIGN_RIGHT | Wx::EXPAND, 5 );

	my $fgSizer35 = Wx::FlexGridSizer->new( 1, 2, 5, 5 );
	$fgSizer35->SetFlexibleDirection(Wx::BOTH);
	$fgSizer35->SetNonFlexibleGrowMode(Wx::FLEX_GROWMODE_SPECIFIED);
	$fgSizer35->Add( $m_staticText31, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer35->Add( $self->{file_http_timeout}, 0, 0, 5 );

	my $fgSizer36 = Wx::FlexGridSizer->new( 1, 2, 5, 5 );
	$fgSizer36->SetFlexibleDirection(Wx::BOTH);
	$fgSizer36->SetNonFlexibleGrowMode(Wx::FLEX_GROWMODE_SPECIFIED);
	$fgSizer36->Add( $m_staticText33, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer36->Add( $self->{file_ftp_timeout}, 0, 0, 5 );

	my $bSizer120 = Wx::BoxSizer->new(Wx::VERTICAL);
	$bSizer120->Add( $m_staticText197, 0, Wx::ALL, 5 );
	$bSizer120->Add( $m_staticline45, 0, Wx::BOTTOM | Wx::EXPAND | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer120->Add( $fgSizer34, 0, Wx::ALL, 5 );
	$bSizer120->Add( 0, 10, 0, Wx::EXPAND, 5 );
	$bSizer120->Add( $m_staticText198, 0, Wx::ALL, 5 );
	$bSizer120->Add( $m_staticline46, 0, Wx::BOTTOM | Wx::EXPAND | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer120->Add( $fgSizer35, 0, Wx::ALL, 5 );
	$bSizer120->Add( 0, 10, 0, Wx::EXPAND, 5 );
	$bSizer120->Add( $m_staticText199, 0, Wx::ALL, 5 );
	$bSizer120->Add( $m_staticline47, 0, Wx::BOTTOM | Wx::EXPAND | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer120->Add( $self->{file_ftp_passive}, 0, Wx::ALL, 5 );
	$bSizer120->Add( $fgSizer36, 0, Wx::ALL, 5 );

	$m_panel8->SetSizerAndFit($bSizer120);
	$m_panel8->Layout;

	my $fgSizer25 = Wx::FlexGridSizer->new( 2, 2, 5, 5 );
	$fgSizer25->SetMinSize( [ 500, -1 ] );
	$fgSizer25->AddGrowableCol(1);
	$fgSizer25->SetFlexibleDirection(Wx::BOTH);
	$fgSizer25->SetNonFlexibleGrowMode(Wx::FLEX_GROWMODE_SPECIFIED);
	$fgSizer25->Add( $m_staticText34, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer25->Add( $self->{run_perl_cmd}, 0, Wx::EXPAND, 5 );
	$fgSizer25->Add( $m_staticText26, 0, Wx::ALIGN_CENTER_VERTICAL, 5 );
	$fgSizer25->Add( $self->{lang_perl5_tags_file}, 0, Wx::EXPAND, 5 );

	my $fgSizer71 = Wx::FlexGridSizer->new( 5, 2, 0, 0 );
	$fgSizer71->SetFlexibleDirection(Wx::BOTH);
	$fgSizer71->SetNonFlexibleGrowMode(Wx::FLEX_GROWMODE_ALL);
	$fgSizer71->Add( $m_staticText35, 0, Wx::ALIGN_CENTER_VERTICAL | Wx::ALL, 5 );
	$fgSizer71->Add( $self->{run_interpreter_args_default}, 0, Wx::ALL | Wx::EXPAND, 5 );
	$fgSizer71->Add( 0, 0, 1, Wx::EXPAND, 5 );
	$fgSizer71->Add( $m_staticText36, 0, Wx::ALL, 5 );
	$fgSizer71->Add( $m_staticText37, 0, Wx::ALIGN_CENTER_VERTICAL | Wx::ALL, 5 );
	$fgSizer71->Add( $self->{run_script_args_default}, 0, Wx::ALL | Wx::EXPAND, 5 );
	$fgSizer71->Add( 0, 0, 1, Wx::EXPAND, 5 );

	my $bSizer71 = Wx::BoxSizer->new(Wx::VERTICAL);
	$bSizer71->Add( $m_staticText39, 0, Wx::ALL, 5 );
	$bSizer71->Add( $m_staticline10, 0, Wx::BOTTOM | Wx::EXPAND | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer71->Add( $self->{lang_perl5_beginner}, 0, Wx::ALL, 5 );
	$bSizer71->Add( $fgSizer25, 0, Wx::ALL, 5 );
	$bSizer71->Add( 0, 10, 0, Wx::EXPAND, 5 );
	$bSizer71->Add( $m_staticText189, 0, Wx::ALL, 5 );
	$bSizer71->Add( $m_staticline39, 0, Wx::BOTTOM | Wx::EXPAND | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer71->Add( $self->{run_use_external_window}, 0, Wx::ALL, 5 );
	$bSizer71->Add( $fgSizer71, 0, 0, 5 );

	$m_panel7->SetSizerAndFit($bSizer71);
	$m_panel7->Layout;

	my $fgSizer711 = Wx::FlexGridSizer->new( 5, 2, 0, 0 );
	$fgSizer711->SetFlexibleDirection(Wx::BOTH);
	$fgSizer711->SetNonFlexibleGrowMode(Wx::FLEX_GROWMODE_ALL);
	$fgSizer711->Add( $self->{lang_perl6_auto_detection}, 0, Wx::ALL, 5 );

	my $bSizer711 = Wx::BoxSizer->new(Wx::VERTICAL);
	$bSizer711->Add( $m_staticText391, 0, Wx::ALL, 5 );
	$bSizer711->Add( $m_staticline101, 0, Wx::BOTTOM | Wx::EXPAND | Wx::LEFT | Wx::RIGHT, 5 );
	$bSizer711->Add( $fgSizer711, 0, 0, 5 );

	$m_panel6->SetSizerAndFit($bSizer711);
	$m_panel6->Layout;

	$self->{treebook}->AddPage( $m_panel5, Wx::gettext("Appearance"), 1 );
	$self->{treebook}->AddPage( $m_panel4, Wx::gettext("Autocomplete"), 0 );
	$self->{treebook}->AddPage( $m_panel10, Wx::gettext("Screen Layout"), 0 );
	$self->{treebook}->AddPage( $m_panel2, Wx::gettext("Behaviour"), 0 );
	$self->{treebook}->AddPage( $m_panel3, Wx::gettext("Editor Style"), 0 );
	$self->{treebook}->AddPage( $m_panel11, Wx::gettext("Features"), 0 );
	$self->{treebook}->AddPage( $m_panel1, Wx::gettext("Indentation"), 0 );
	$self->{treebook}->AddPage( $self->{keybindings_panel}, Wx::gettext("Key Bindings"), 0 );
	$self->{treebook}->AddPage( $m_panel8, Wx::gettext("File Handling"), 0 );
	$self->{treebook}->AddPage( $m_panel7, Wx::gettext("Language - Perl 5"), 0 );
	$self->{treebook}->AddPage( $m_panel6, Wx::gettext("Language - Perl 6"), 0 );

	my $buttons = Wx::BoxSizer->new(Wx::HORIZONTAL);
	$buttons->Add( $self->{save}, 0, Wx::ALL, 5 );
	$buttons->Add( $self->{advanced}, 0, Wx::ALL, 5 );
	$buttons->Add( $self->{cancel}, 0, Wx::ALL, 5 );

	my $vsizer = Wx::BoxSizer->new(Wx::VERTICAL);
	$vsizer->Add( $self->{treebook}, 1, Wx::ALL | Wx::EXPAND, 5 );
	$vsizer->Add( 0, 0, 0, Wx::EXPAND, 5 );
	$vsizer->Add( $m_staticline1, 0, Wx::ALL | Wx::EXPAND, 5 );
	$vsizer->Add( $buttons, 0, Wx::ALIGN_RIGHT, 5 );

	my $hsizer = Wx::BoxSizer->new(Wx::HORIZONTAL);
	$hsizer->Add( $vsizer, 1, Wx::ALL | Wx::EXPAND, 5 );

	$self->SetSizerAndFit($hsizer);
	$self->Layout;

	return $self;
}

sub treebook {
	$_[0]->{treebook};
}

sub main_functions_order {
	$_[0]->{main_functions_order};
}

sub main_tasks_regexp {
	$_[0]->{main_tasks_regexp};
}

sub window_list_shorten_path {
	$_[0]->{window_list_shorten_path};
}

sub main_output_ansi {
	$_[0]->{main_output_ansi};
}

sub info_on_statusbar {
	$_[0]->{info_on_statusbar};
}

sub autocomplete_always {
	$_[0]->{autocomplete_always};
}

sub autocomplete_method {
	$_[0]->{autocomplete_method};
}

sub autocomplete_subroutine {
	$_[0]->{autocomplete_subroutine};
}

sub lang_perl5_autocomplete_min_suggestion_len {
	$_[0]->{lang_perl5_autocomplete_min_suggestion_len};
}

sub lang_perl5_autocomplete_max_suggestions {
	$_[0]->{lang_perl5_autocomplete_max_suggestions};
}

sub lang_perl5_autocomplete_min_chars {
	$_[0]->{lang_perl5_autocomplete_min_chars};
}

sub autocomplete_brackets {
	$_[0]->{autocomplete_brackets};
}

sub autocomplete_multiclosebracket {
	$_[0]->{autocomplete_multiclosebracket};
}

sub editor_fold_pod {
	$_[0]->{editor_fold_pod};
}

sub main_directory_panel {
	$_[0]->{main_directory_panel};
}

sub main_functions_panel {
	$_[0]->{main_functions_panel};
}

sub main_outline_panel {
	$_[0]->{main_outline_panel};
}

sub main_tasks_panel {
	$_[0]->{main_tasks_panel};
}

sub main_cpan_panel {
	$_[0]->{main_cpan_panel};
}

sub main_vcs_panel {
	$_[0]->{main_vcs_panel};
}

sub main_syntax_panel {
	$_[0]->{main_syntax_panel};
}

sub main_output_panel {
	$_[0]->{main_output_panel};
}

sub main_foundinfiles_panel {
	$_[0]->{main_foundinfiles_panel};
}

sub main_replaceinfiles_panel {
	$_[0]->{main_replaceinfiles_panel};
}

sub startup_files {
	$_[0]->{startup_files};
}

sub main_singleinstance {
	$_[0]->{main_singleinstance};
}

sub startup_splash {
	$_[0]->{startup_splash};
}

sub default_line_ending {
	$_[0]->{default_line_ending};
}

sub default_projects_directory {
	$_[0]->{default_projects_directory};
}

sub editor_wordwrap {
	$_[0]->{editor_wordwrap};
}

sub mid_button_paste {
	$_[0]->{mid_button_paste};
}

sub editor_smart_highlight_enable {
	$_[0]->{editor_smart_highlight_enable};
}

sub save_autoclean {
	$_[0]->{save_autoclean};
}

sub editor_style {
	$_[0]->{editor_style};
}

sub editor_cursor_blink {
	$_[0]->{editor_cursor_blink};
}

sub editor_right_margin_enable {
	$_[0]->{editor_right_margin_enable};
}

sub editor_right_margin_column {
	$_[0]->{editor_right_margin_column};
}

sub editor_font {
	$_[0]->{editor_font};
}

sub editor_currentline_color {
	$_[0]->{editor_currentline_color};
}

sub preview {
	$_[0]->{preview};
}

sub feature_bookmark {
	$_[0]->{feature_bookmark};
}

sub feature_folding {
	$_[0]->{feature_folding};
}

sub feature_cursormemory {
	$_[0]->{feature_cursormemory};
}

sub feature_session {
	$_[0]->{feature_session};
}

sub feature_syntax_check_annotations {
	$_[0]->{feature_syntax_check_annotations};
}

sub feature_document_diffs {
	$_[0]->{feature_document_diffs};
}

sub feature_cpan {
	$_[0]->{feature_cpan};
}

sub feature_debugger {
	$_[0]->{feature_debugger};
}

sub feature_vcs_support {
	$_[0]->{feature_vcs_support};
}

sub feature_fontsize {
	$_[0]->{feature_fontsize};
}

sub editor_indent_tab {
	$_[0]->{editor_indent_tab};
}

sub editor_indent_width {
	$_[0]->{editor_indent_width};
}

sub editor_indent_tab_width {
	$_[0]->{editor_indent_tab_width};
}

sub editor_indent_auto {
	$_[0]->{editor_indent_auto};
}

sub editor_autoindent {
	$_[0]->{editor_autoindent};
}

sub update_file_from_disk_interval {
	$_[0]->{update_file_from_disk_interval};
}

sub file_http_timeout {
	$_[0]->{file_http_timeout};
}

sub file_ftp_passive {
	$_[0]->{file_ftp_passive};
}

sub file_ftp_timeout {
	$_[0]->{file_ftp_timeout};
}

sub lang_perl5_beginner {
	$_[0]->{lang_perl5_beginner};
}

sub run_perl_cmd {
	$_[0]->{run_perl_cmd};
}

sub lang_perl5_tags_file {
	$_[0]->{lang_perl5_tags_file};
}

sub run_use_external_window {
	$_[0]->{run_use_external_window};
}

sub run_interpreter_args_default {
	$_[0]->{run_interpreter_args_default};
}

sub run_script_args_default {
	$_[0]->{run_script_args_default};
}

sub lang_perl6_auto_detection {
	$_[0]->{lang_perl6_auto_detection};
}

sub preview_refresh {
	$_[0]->main->error('Handler method preview_refresh for event editor_style.OnChoice not implemented');
}

sub guess {
	$_[0]->main->error('Handler method guess for event editor_indent_guess.OnButtonClick not implemented');
}

sub _update_list {
	$_[0]->main->error('Handler method _update_list for event filter.OnText not implemented');
}

sub _on_list_col_click {
	$_[0]->main->error('Handler method _on_list_col_click for event list.OnListColClick not implemented');
}

sub _on_list_item_selected {
	$_[0]->main->error('Handler method _on_list_item_selected for event list.OnListItemSelected not implemented');
}

sub _on_set_button {
	$_[0]->main->error('Handler method _on_set_button for event button_set.OnButtonClick not implemented');
}

sub _on_delete_button {
	$_[0]->main->error('Handler method _on_delete_button for event button_delete.OnButtonClick not implemented');
}

sub _on_reset_button {
	$_[0]->main->error('Handler method _on_reset_button for event button_reset.OnButtonClick not implemented');
}

sub advanced {
	$_[0]->main->error('Handler method advanced for event advanced.OnButtonClick not implemented');
}

sub cancel {
	$_[0]->main->error('Handler method cancel for event cancel.OnButtonClick not implemented');
}

1;

# Copyright 2008-2016 The Padre development team as listed in Padre.pm.
# LICENSE
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl 5 itself.

